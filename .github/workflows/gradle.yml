# This workflow will build a Java project with Gradle
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle
name: Java CI with Gradle

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    # 실행 환경 지정
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    
    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        java-version: '11'
        distribution: 'adopt'
        
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: Build with Gradle
      run: ./gradlew build
    
    # 전송할 파일을 담을 디렉토리 생성
    - name: Make Directory for deliver
      run: mkdir deploy
    
    # Jar 파일 Copy
    - name: Copy Jar
      run: cp ./build/libs/*.jar ./deploy/    
    
    # appspec.yml Copy
    - name: Copy appspec
      run: cp appspec.yml ./deploy/

    # board-start.sh Copy
    - name: Copy user-start.sh
      run: cp user-start.sh ./deploy/
    
    # 압축파일 형태로 전달
    - name: Make zip file
      run: zip -r -qq -j ./spring-boot-user-build.zip ./deploy 
    
    # S3 Bucket으로 copy
    - name: Deliver to AWS S3
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.ACCESS_KEY }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.SECRET_ACCESS_KEY }}
      run: |
        aws s3 cp \
        --region ap-northeast-2 \
        --acl private \
        ./spring-boot-user-build.zip s3://spring-boot-board/
    
    # Deploy
    - name: Deploy
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.ACCESS_KEY }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.SECRET_ACCESS_KEY }}
      run: |
        aws deploy create-deployment \
        --application-name springboot-board-deploy \
        --deployment-group-name springboot-board-deploy-group \
        --file-exists-behavior OVERWRITE \
        --s3-location bucket=spring-boot-board,bundleType=zip,key=spring-boot-user-build.zip \
        --region ap-northeast-2
